# docker-compose.yml
services:
  app:
    build:
      context: .
      target: ${NODE_ENV}
      args:
        - NODE_ENV=${NODE_ENV}
    environment:
      - NODE_ENV=${NODE_ENV}
      - SERVER_PORT=${SERVER_PORT}
    ports:
      - '3000:${SERVER_PORT}'
      - '9229:9229'
    volumes:
      - .:/node/app:delegated
      - /node/app/node_modules
    labels:
      - 'traefik.http.services.web.loadbalancer.server.port=${SERVER_PORT}'
      - 'traefik.http.routers.api.rule=Host(`api.traefik.me`)'
      - 'traefik.http.routers.api-tls.tls.domains[0].main=api.traefik.me'
      - 'traefik.http.routers.api-tls.tls.domains[0].sans=api-*.traefik.me'
      - 'traefik.http.routers.api.tls=true'
    networks:
      - dev
  traefik:
    restart: unless-stopped
    image: traefik:v2.4

    container_name: ${PROJECT_NAME}_TRAEFIK
    ports:
      - '80:80'
      - '443:443'
    labels:
      - 'traefik.http.services.traefik.loadbalancer.server.port=8080'
      # Dashboard
      - 'traefik.enable=true'
      - 'traefik.http.routers.dashboard.rule=Host(`dashboard.traefik.me`)'
      - 'traefik.http.routers.dashboard-tls.tls.domains[0].main=dashboard.traefik.me'
      - 'traefik.http.routers.dashboard-tls.tls.domains[0].sans=dashboard-*.traefik.me'
      - 'traefik.http.routers.dashboard.tls=true'
      - 'traefik.http.routers.traefik.service=api@internal'

      # htaccess password
      # - "traefik.http.routers.traefik.middlewares=auth"
      # - "traefik.http.middlewares.auth.basicauth.users=user:$$apr1$$q8eZFHjF$$Fvmkk//V6Btlaf2i/ju5n/" # user/password
    volumes:
      - ./docker/traefik/traefik.dev.yml:/etc/traefik/traefik.yml
      - ./docker/traefik/tls.yml:/etc/traefik/tls.yml
      - /var/run/docker.sock:/var/run/docker.sock
      - certs:/etc/ssl/traefik

    networks:
      - dev
  reverse-proxy-https-helper:
    image: alpine
    container_name: ${PROJECT_NAME}_PROXY_HELPER
    command: sh -c "cd /etc/ssl/traefik
      && wget traefik.me/cert.pem -O cert.pem
      && wget traefik.me/privkey.pem -O privkey.pem"
    volumes:
      - certs:/etc/ssl/traefik
    networks:
      - dev
  mongo:
    container_name: ${PROJECT_NAME}_MONGO
    hostname: mongo
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    env_file:
      - .env
    volumes:
      - './docker/mongo/mongo-entrypoint/:/docker-entrypoint-initdb.d/init-mongo-js:ro'
      - ./db:/data/db
    networks:
      - dev

  mongodata:
    container_name: ${PROJECT_NAME}_MONGO_DATA
    image: mongo:3.0.4
    volumes:
      - /data/db
    networks:
      - dev
  portainer-ce:
    container_name: ${PROJECT_NAME}_PORTAINER
    image: portainer/portainer-ce
    restart: always
    labels:
      # permet de cr√©er un routeur Traefik
      - 'traefik.http.services.portainer.loadbalancer.server.port=9000'
      - 'traefik.http.routers.portainer.rule=Host(`portainer.traefik.me`)'
      - 'traefik.http.routers.portainer-tls.tls.domains[0].main=portainer.traefik.me'
      - 'traefik.http.routers.portainer-tls.tls.domains[0].sans=portainer-*.traefik.me'
      - 'traefik.http.routers.portainer.tls=true'
      # # Set password
      # - "traefik.http.routers.portainer.middlewares=auth"
      # - "traefik.http.middlewares.auth.basicauth.users=user:$$apr1$$q8eZFHjF$$Fvmkk//V6Btlaf2i/ju5n/" # user/password
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - dev
networks:
  dev:
volumes:
  certs:
